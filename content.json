{"meta":{"title":"Minimalist","subtitle":null,"description":null,"author":"Yang Ran","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"http 缓存","slug":"缓存","date":"2018-01-22T04:27:35.000Z","updated":"2018-01-22T04:28:26.000Z","comments":true,"path":"2018/01/22/缓存/","link":"","permalink":"http://yoursite.com/2018/01/22/缓存/","excerpt":"","text":"4种缓存方式HTTP缓存控制参考 分类和区别规定了过期时间： 响应header 描述 常用响应返回内容 推荐 特点 缺点 场景 Cache-Control 在多少秒内进行缓存 public, max-age=秒 是 固定时间 Expires 在此时间前进行缓存 格林威治时间 否 绝对时间 受客户端时间影响 兼容http1.0 需进行比较，会返回304状态码： 响应header 请求header 描述 常用响应返回内容 推荐 特点 缺点 场景 ETag If-None-Match 固定字符串 md5 是 检测文件完整性 Last-Modified If-Modified-Since 在某时间后没再更改 格林威治时间 否 浏览器根据返回的时间自己决定缓存 浏览器差异 Tips：Cache-Control与Expires一样，都是在某个时间未到来前进行缓存默认第一个请求(主页)的请求头里会自动加上Cache-Control: max-age=0，这个请求无论响应头的Cache-Control是什么设置都不会缓存，减少请求次数同时减少下载次数ETag方式通过检查request.headers里的if-None-Match里的32位md5字符串来检测文件完整性决定是否更新, 如果md5匹配成功则返回304，只减少下载次数 Cache-Control 与 Last-Modified / if-Modified-Since 比较 对于所有可以缓存的资源都可以同时使用这两种策略进行缓存Cache-Control/Expires的优先级要高于Last-Modified/ETag Cache-Control:1设置固定过期时间2文件在过期时间没到之前都不进行请求也不进行下载更新3解决方法只能通过加时间戳改变文件名解决 Last-Modified / if-Modified-Since:1通过给文件内容进行哈希算法来确定文件内容版本2通过对请求头if-Modified-Since的字符串来检测文件内容有没改变3文件内容没改变则不更新资源，跟请求资源的文件名关系不大但每次都需要请求4可以通过标识文件版本名、加长缓存时间的方式来减少304响应。 结论 1需要兼容HTTP1.0的时候需要使用Expires，不然可以考虑直接使用Cache-Control2需要处理一秒内多次修改的情况，或者其他Last-Modified处理不了的情况，才使用ETag，否则使用Last-Modified。3对于所有可缓存资源，需要指定一个Expires或Cache-Control，同时指定Last-Modified或者Etag。4可以通过标识文件版本名、加长缓存时间的方式来减少304响应。HTTP缓存控制参考 MD5hash算法任何文件或数据都可以通过MD5算法转化成一个32位的固定字符串场景：1检查缓存的文件内容是否有变化2检查下载文件是否下载完毕(cat xxx.mp4 | md5)","categories":[{"name":"http","slug":"http","permalink":"http://yoursite.com/categories/http/"}],"tags":[{"name":"http","slug":"http","permalink":"http://yoursite.com/tags/http/"}]},{"title":"flex布局","slug":"flex","date":"2018-01-22T04:02:11.000Z","updated":"2018-01-22T04:24:40.000Z","comments":true,"path":"2018/01/22/flex/","link":"","permalink":"http://yoursite.com/2018/01/22/flex/","excerpt":"","text":"flex之前 文档流布局 float + clear 相对定位 + 绝对定位 display inline-block 负margin flex特点 布局与方向无关 空间自动分配、自动对齐 适用于简单的线性布局 基本概念基本flex flex container的六个属性(父元素) 在下面demo的父元素里审查元素加上各种属性试试1flex-direction2flex-wrap &amp; flex-direction3缩写flex-flow: [direction] [wrap] 4justify-content5align-items6align-content flex item的六个属性1flex-grow2flex-shrink3flex-basis4缩写flex: [grow] [shrink] [basis]5order6align-self demo1手机页面布局topbar+main+tabs上下固定2产品列表ul&gt;li*9抛弃负margin3PC页面布局中间自适应抛弃双飞翼4完美居中 参考css-tricksflex布局-阮一峰","categories":[{"name":"css","slug":"css","permalink":"http://yoursite.com/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-01-21T14:02:59.000Z","updated":"2018-01-21T14:02:59.000Z","comments":true,"path":"2018/01/21/hello-world/","link":"","permalink":"http://yoursite.com/2018/01/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}